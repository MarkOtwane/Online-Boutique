generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  products  Product[]
}

model Product {
  id           Int         @id @default(autoincrement())
  name         String
  price        Float
  imageUrl     String?
  createdAt    DateTime    @default(now())
  commentCount Int         @default(0)
  repostCount  Int         @default(0)
  categoryId   Int
  comments     Comment[]
  orderItems   OrderItem[]
  category     Category    @relation(fields: [categoryId], references: [id])
  reposts      Repost[]
}

model User {
  id               Int                           @id @default(autoincrement())
  email            String                        @unique
  password         String
  role             String                        @default("customer")
  createdAt        DateTime                      @default(now())
  isOnline         Boolean                       @default(false)
  lastSeen         DateTime                      @default(now())
  conversations    ChatConversationParticipant[]
  receivedMessages ChatMessage[]                 @relation("MessageReceiver")
  sentMessages     ChatMessage[]                 @relation("MessageSender")
  comments         Comment[]
  orders           Order[]
  reposts          Repost[]
}

model Order {
  id                Int            @id @default(autoincrement())
  userId            Int
  total             Float
  paymentStatus     PaymentStatus  @default(PENDING)
  paymentMethod     PaymentMethod?
  phoneNumber       String?
  transactionId     String?
  paymentAmount     Float?
  paymentDate       DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  checkoutRequestId String?
  user              User           @relation(fields: [userId], references: [id])
  orderItems        OrderItem[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Comment {
  id                 Int       @id @default(autoincrement())
  productId          Int
  userId             Int
  content            String
  parentId           Int?
  isAdminResponse    Boolean   @default(false)
  isOfficialResponse Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  parent             Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies            Comment[] @relation("CommentReplies")
  product            Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([userId])
  @@index([isAdminResponse])
  @@index([isOfficialResponse])
}

model Repost {
  id        Int      @id @default(autoincrement())
  productId Int
  userId    Int
  content   String?
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([productId, userId])
  @@index([productId])
  @@index([userId])
}

model ChatConversation {
  id           Int                           @id @default(autoincrement())
  createdAt    DateTime                      @default(now())
  updatedAt    DateTime                      @updatedAt
  participants ChatConversationParticipant[]
  messages     ChatMessage[]
}

model ChatConversationParticipant {
  id             Int              @id @default(autoincrement())
  conversationId Int
  userId         Int
  joinedAt       DateTime         @default(now())
  conversation   ChatConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@index([userId])
}

model ChatMessage {
  id             Int              @id @default(autoincrement())
  conversationId Int
  senderId       Int
  receiverId     Int?
  content        String
  isRead         Boolean          @default(false)
  readAt         DateTime?
  createdAt      DateTime         @default(now())
  conversation   ChatConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  receiver       User?            @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender         User             @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([senderId])
  @@index([receiverId])
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
}

enum PaymentMethod {
  MPESA
  CARD
  CASH
}
